services:
  # Single PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: attendance_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - '9092:9092'
    environment:
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://kafka:29093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # Kafka Topic Setup
  kafka-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:29092 1 30
        echo 'Creating topic: user-data-changes'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --topic user-data-changes --partitions 1 --replication-factor 1
        echo 'Topic created successfully!'
      "

  # Services
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_DATABASE=attendance_app
      - JWT_SECRET=default-secret
      - JWT_EXPIRES_IN=7d
      - PORT=3001
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - postgres
      - kafka

  employee-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_DATABASE=attendance_app
      - JWT_SECRET=default-secret
      - PORT=3002
      - KAFKA_BROKERS=kafka:29092
    depends_on:
      - postgres
      - kafka

  attendance-service:
    build:
      context: ./services/attendance-service
      dockerfile: Dockerfile
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_DATABASE=attendance_app
      - JWT_SECRET=default-secret
      - PORT=3003
    depends_on:
      - postgres

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=default-secret
      - AUTH_SERVICE_URL=http://auth-service:3001
      - EMPLOYEE_SERVICE_URL=http://employee-service:3002
      - ATTENDANCE_SERVICE_URL=http://attendance-service:3003
    depends_on:
      - auth-service
      - employee-service
      - attendance-service

  # Frontend Applications
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:3000
    ports:
      - '3004:80'
    depends_on:
      - api-gateway

  admin-frontend:
    build:
      context: ./admin-frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:3000
    ports:
      - '3005:80'
    depends_on:
      - api-gateway

  logging-service:
    build:
      context: ./services/logging-service
      dockerfile: Dockerfile
    ports:
      - '3006:3006'
    environment:
      - NODE_ENV=development
      - KAFKA_BROKERS=localhost:9092
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_DATABASE=attendance_app
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
